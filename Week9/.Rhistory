install.packages("MASS")
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(BIAS.data)
library(MASS)
iris.test <- BIAS.data::iris.test
iris.train <- BIAS.data::iris.train
source("_functions/CV.class.R")
pairplot(iris.train)
pairs(iris.train)
pairs(iris.train, colors(iris.train$Species), pch = 19, cex = 1.5, main = "Iris data set")
pairs(iris.train, colors = iris.train$Species, pch = 19, cex = 1.5, main = "Iris data set")
pairs(iris.train, fill = iris.train$Species, pch = 21, cex = 1.5, col = "black", bg = iris.train$Species)
View(iris.train)
pairs(iris.train, fill = iris.train$Species, pch = 21, cex = 1.5, col = "lightblue", bg = iris.train$Species)
```{r}
pairs(iris.train, fill = iris.train$Species, pch = 21, cex = 1.5, col = "lightgrey", bg = iris.train$Species)
pairs(iris.train[,:4], fill = iris.train$Species, pch = 21, cex = 1.5, col = "lightgrey", bg = iris.train$Species)
pairs(iris.train[:4], fill = iris.train$Species, pch = 21, cex = 1.5, col = "lightgrey", bg = iris.train$Species)
pairs(iris.train[4], fill = iris.train$Species, pch = 21, cex = 1.5, col = "lightgrey", bg = iris.train$Species)
pairs(iris.train[1:4], fill = iris.train$Species, pch = 21, cex = 1.5, col = "lightgrey", bg = iris.train$Species)
library(GGally)
ggpairs(iris.train, aes(color = Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set")
theme(legend.position = "bottom") +
ggpairs(iris.train[,1:4], aes(color = Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set") +
theme(
theme_bw() +
ggpairs(iris.train[1:4], aes(color = Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set") +
theme(
ggpairs(iris.train[1:4], aes(color = Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set")
ggpairs(iris.train[,1:4], aes(color = Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set")
ggpairs(iris.train[,1:4], aes(color = iris.train$Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set")
ggpairs(iris.train[,1:4], aes(color = iris.train$Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set") +
theme(plot.title = element_text(hjust = 0.5))
ggpairs(iris.train[,1:4], aes(color = iris.train$Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("red", "blue"))
ggpairs(iris.train[,1:4], aes(color = iris.train$Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("lightpink", "coral"))
ggpairs(iris.train[,1:4], aes(color = iris.train$Species)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Pairs plot of iris data set") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("lightpink", "coral")) +
scale_fill_manual(values = c("lightpink", "coral"))
lda.model <- lda(Species ~ Sepal.Length, data = iris.train, prior = c(0.5, 0.5))
lda.model
lda.model$class
lda.model <- lda(Species ~ Sepal.Length, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
lda.model$class
lda.model
conf.matrix <- confusion(iris.train$Species, lda.model$class)
library(mixlm)
conf.matrix <- confusion(iris.train$Species, lda.model$class)
(32+29)/80
(8+11) /80
lda.best <- lda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
lda.best <- lda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
lda.best <- qda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
lda.best <- qda(Species ~ Petal.Length + Petal.Width + Sepal.Length, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
lda.best <- qda(Species ~ Petal.Length + Petal.Width + Sepal.Length, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
lda.best <- qda(Species ~ Petal.Length + Petal.Width + Sepal.Length + Sepal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
lda.best <- qda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
lda.best <- qda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
lda.best <- lda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
best.mod <- lda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, lda.best$class)
best.mod <- lda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, best.mod$class)
best.mod <- qda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, best.mod$class)
best.mod <- qda(Species ~ Petal.Length, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
best.mod <- qda(Species ~ Petal.Length, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, best.mod$class)
best.mod <- qda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, best.mod$class)
best.mod <- qda(Species ~ Petal.Length + Petal.Width + Sepal.Length, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, best.mod$class)
best.mod <- qda(Species ~ Petal.Length + Petal.Width + Sepal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, best.mod$class)
best.mod <- qda(Species ~ Petal.Length + Petal.Width, data = iris.train, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.train$Species, best.mod$class)
4/80
predictions <- predict(best.mod, newdata = iris.test)
predict_iris.test <- qda(Species ~ Petal.Length + Petal.Width, data = iris.test, prior = c(0.5, 0.5), CV = TRUE)
conf.matrix <- confusion(iris.test$Species, predict_iris.test$class)
conf.matrix <- confusion(iris.train$Species, logistic.model$fitted.values)
logistic.model <- glm(Species ~ Petal.Length + Petal.Width, data = iris.train, family = binomial)
conf.matrix <- confusion(iris.train$Species, logistic.model$fitted.values)
predicted.probs <-
predicted.probs <- predict(logistic.model, newdata = iris.test, type = "response")
predicted.probs
predicted.classes <- ifelse(predicted.probs > 0.5, "virginica", "versicolor")
predicted.classes
conf.matrix <- confusion(iris.test$Species, predicted.classes)
predicted.classes <- factor(ifelse(predicted.probs > 0.5, "virginica", "versicolor"))
predicted.classes
conf.matrix <- confusion(iris.test$Species, predicted.classes)
9/10
predicted.probs <- predict(logistic.model, newdata = iris.test, type = "response")
predicted.classes <- factor(ifelse(predicted.probs > 0.5, "virginica", "versicolor"))
counts <- table(predicted.classes)
counts
iris.test$postprob <- predict(mymod2, new = iris.test, type = "response")
iris.test$postprob <- predict(logistic.model, new = iris.test, type = "response")
boxplot(iris.test$postprob ~ iris.test$Species, xlab = "Species", ylab = "Posterior probability of virginica", main = "Posterior probabilities of virginica")
predicted.classes <- ifelse(iris.test$postprob > 0.5, "virginica", "versicolor")
counts <- table(predicted.classes, iris.test$Species)
counts
(iris.test$Species, predicted.classes)
conf.matrix <- confusion(iris.test$Species, predicted.classes)
predicted.classes <- factor(ifelse(iris.test$postprob > 0.5, "virginica", "versicolor"))
counts <- table(predicted.classes, iris.test$Species)
counts
conf.matrix <- confusion(iris.test$Species, predicted.classes)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(BIAS.data)
library(MASS)
library(mixlm)
library(tidyverse)
library(ggfortify)
install.packages("ggfortify")
library(BIAS.data)
library(MASS)
library(mixlm)
library(tidyverse)
library(ggfortify)
data("poems")
data("poems.test")
poems <- BIAS.data::poems
poems <- BIAS.data::poems
poems.test <- BIAS.data::poems.test
View(poems.test)
poems.long <- poems %>%
pivot_longer(-Author, names_to = "letter", values_to = "freq") %>%
mutate(letter = as_factor(letter)) # convert 'letter' to factor to keep the order
poems.long
library(ggplot2)
library(BIAS.data)
library(MASS)
library(mixlm)
library(tidyverse)
library(ggfortify)
library(ggplot2)
ggplot() +
geom_bar(data = poems, mapping = aes(x = Author, y = freq, fill = Author), stat = "identity")
ggplot() +
geom_bar(data = poems, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity")
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity")
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
theme_minimal +
scale_fill_manual(values = c("lightpink", "coral", "lightblue"))
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
theme_minimal +
scale_fill_manual(values = c("lightpink", "coral", "lightblue"))
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author))
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_fill_viridis_d()
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_fill_viridis_b()
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_fill_viridis_c()
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_fill_fermenter()
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_fill_fermenter(palette = "YlOrRd", n.breaks = 5)
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_color_manual(values = c("lightpink", "coral"))
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_fill_stepsn()
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_fill_manual(values = c("lightpink", "coral","lightblue"))
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_fill_manual(values = c("lightpink", "lightyellow2","lightblue"))
ggplot() +
geom_bar(data = poems.long, mapping = aes(x = letter, y = freq, fill = Author), stat = "identity") +   labs(x = "Letter", y = "Frequency", title = "Letter frequency in poems") +
facet_grid(rows = vars(Author)) +
theme_light() +
scale_fill_manual(values = c("lightpink", "lightyellow2","lightblue")) +
theme(plot.title = element_text(hjust = 0.5))
pca <- prcomp(poems[,-1], scale=TRUE)
summary(pca)
pca$rotation
autoplot(pca,
x = 1, # plot PC1 on the x-axis
y = 2, # plot PC2 on the y-axis (play around with this)
data = poems, # you have to refer to the original data set for colourscale = 0, # don't use the scaling implemented in autoplot()
size = 4, # size of points
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 4,
loadings.label.repel = TRUE,
loadings.label.colour = "grey70",
loadings.colour = "grey70",
colour = "Author") +
scale_colour_viridis_d() +
theme_minimal()
scores.test <- predict(pca, newdata = poems.test[,-1])
scores.test
scores.test <- cbind(Author = poems.test$Author, as_tibble(scores.test))
scores.test
# First, we need to make a new data frame containing the information
# about the author and the first two principal components.
scores.poems <- cbind(Author = poems$Author, as_tibble(pca$x))
View(scores.poems)
lda.poems <- lda(Author ~ PC1 + PC2, data = scores.poems)
# Then, predict the authorship of the 'test' poems
lda.pred <- predict(lda.poems, newdata = scores.test)
lda.pred
posterior_pred <- round(lda.pred$posterior, digits = 2))
posterior_pred <- round(lda.pred$posterior, digits = 2)
posterior_pred
View(lda.pred)
conf_mat <- confusion(lda.pred$class, scores.test$Author)
# Then, predict the authorship of the 'test' poems
lda.pred <- predict(lda.poems, newdata = scores.test)
lda.pred
lda.poems
