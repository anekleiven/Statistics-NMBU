knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(BIAS.data)
load(Maldi.train)
data(Maldi.train)
library(BIAS.data)
data(Maldi.train)
head(Maldi.train)
PCAModel.1 <- prcomp(Maldi.train[,-1], scale = FALSE)
summary(PCAModel.1)
PCAModel.1 <- prcomp(Maldi.train[,-1], center =TRUE , scale = FALSE)
summary(PCAModel.1)
Maldi.train.tmp <<- within(Maldi.train, {
PC15 <- PCAModel.1$x[,15]
PC14 <- PCAModel.1$x[,14]
PC13 <- PCAModel.1$x[,13]
PC12 <- PCAModel.1$x[,12]
PC11 <- PCAModel.1$x[,11]
PC10 <- PCAModel.1$x[,10]
PC9 <- PCAModel.1$x[,9]
PC8 <- PCAModel.1$x[,8]
PC7 <- PCAModel.1$x[,7]
PC6 <- PCAModel.1$x[,6]
PC5 <- PCAModel.1$x[,5]
PC4 <- PCAModel.1$x[,4]
PC3 <- PCAModel.1$x[,3]
PC2 <- PCAModel.1$x[,2]
PC1 <- PCAModel.1$x[,1]
})
library(mixlm)
PCRModel.1 <- lm(Y ~ PC1:PC15, data = Maldi.train.tmp)
View(Maldi.train.tmp)
PCRModel.1 <- lm(Percent_milk ~ PC1:PC15, data = Maldi.train.tmp)
summary(PCRModel.1)
PCRModel.1 <- lm(Percent_milk ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 + PC15, data = Maldi.train.tmp)
summary(PCRModel.1)
PCRModel.1 <- lm(Percent_milk ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 + PC15, data = Maldi.train.tmp, backward("alpha to remove" = 0.05))
PCRModel.2 <- backward(PCRModel.1, alpha.to.remove = 0.05)
PCRModel.2 <- backward(PCRModel.1, alpha = 0.05)
PCRModel.1 <- lm(Percent_milk ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 + PC15, data = Maldi.train.tmp)
summary(PCRModel.1)
summary(PCRModel.2)
PCRModel.2 <- backward(PCRModel.1, alpha = 0.05)
PCRModel <- lm(Percent_milk ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC8 + PC10 + PC11 + PC12, data = Maldi.train.tmp)
summary(PCRModel)
library(pls)
PCRModel <- pcr(Percent_milk ~ ., data = Maldi.train.tmp, ncomp = 15, scale = FALSE, validation = "CV", segments = 10)
summary(PCRModel)
summary(PCRModel)
PCRModel <- pcr(Percent_milk ~ ., data = Maldi.train.tmp, ncomp = 10, scale = FALSE, validation = "CV", segments = 10)
summary(PCRModel)
PCRModel <- pcr(Percent_milk ~ ., data = Maldi.train.tmp, ncomp = 15, scale = FALSE, validation = "CV", segments = 10)
summary(PCRModel)
PCRModel <- pcr(Percent_milk ~ ., data = Maldi.train, ncomp = 15, scale = FALSE, validation = "CV", segments = 10)
summary(PCRModel)
plot(RMSEP(PCRModel))
plot(PCRModel$scores[,1], PCRModel$scores[,2], xlab = "PC1", ylab = "PC2"))
plot(PCRModel$scores[,1], PCRModel$scores[,2], xlab = "PC1", ylab = "PC2")
plot(PCRModel$scores[,1], PCRModel$scores[,2], xlab = "PC1", ylab = "PC2", labels = rownames(PCRModel$scores)))
plot(PCRModel$scores[,1], PCRModel$scores[,2], xlab = "PC1", ylab = "PC2", labels = rownames(PCRModel$scores))
View(PCRModel)
PCRModel[["scores"]]
plot(PCRModel$scores[,1], PCRModel$scores[,2], xlab = "PC1", ylab = "PC2", labels)
plot(PCRModel$scores[,1], PCRModel$scores[,2], xlab = "PC1", ylab = "PC2"
plot(PCRModel$scores[,1], PCRModel$scores[,2], xlab = "PC1", ylab = "PC2")
scoreplot(PCRModel)
scoreplot(PCRModel, labels = TRUE))
scoreplot(PCRModel, labels = TRUE)
scoreplot(PCRModel , comp = c(1,2), labels = 1:dim(Maldi.train)[1])
scoreplot(PCRModel , comp = c(1,2), labels = 1:dim(Maldi.train)[1], title('Scoreplot'))
PLSModel <- plsr(Percent_milk ~ ., data = Maldi.train, ncomp = 15, scale = FALSE, validation = "CV", segments = 10)
summary(PLSModel)
plot(RMSEP(PLSModel))
data("Maldi.test")
data("Maldi.test")
Ncomp <- 1
Model <- PCRModel
yhat <- predict(Model, newdata=Maldi.test, ncomp=Ncomp)[,,1]
plot(yhat, Maldi.test$Y)
cor(yhat, Maldi.test$Y)
cor(yhat, Maldi.test$Y)
cor(yhat, Maldi.test$Y)
View(Maldi.test)
plot(yhat, Maldi.test$Percent_milk, xlab="Predicted", ylab="True", main="Predicted vs True"))
plot(yhat, Maldi.test$Percent_milk)
cor(yhat, Maldi.test$Percent_milk)
#To make sure that the RMSEP-function in the pls-package is used:
pls::RMSEP(PCRModel, estimate="test", newdata=Maldi.test, ncomp=Ncomp)
yhat <- predict(Model, newdata=Maldi.test, ncomp=Ncomp)[,,1]
data("Maldi.test")
Ncomp <- 10
Model <- PCRModel
yhat <- predict(Model, newdata=Maldi.test, ncomp=Ncomp)[,,1]
plot(yhat, Maldi.test$Percent_milk)
cor(yhat, Maldi.test$Percent_milk)
#To make sure that the RMSEP-function in the pls-package is used:
pls::RMSEP(PCRModel, estimate="test", newdata=Maldi.test, ncomp=Ncomp)
correlation <- cor(yhat, Maldi.test$Percent_milk)
#To make sure that the RMSEP-function in the pls-package is used:
plot(pls::RMSEP(PCRModel, estimate="test", newdata=Maldi.test, ncomp=Ncomp))
data("Maldi.test")
Ncomp <- 11
Model <- PCRModel
yhat <- predict(Model, newdata=Maldi.test, ncomp=Ncomp)[,,1]
plot(yhat, Maldi.test$Percent_milk)
correlation <- cor(yhat, Maldi.test$Percent_milk)
#To make sure that the RMSEP-function in the pls-package is used:
plot(pls::RMSEP(PCRModel, estimate="test", newdata=Maldi.test, ncomp=Ncomp))
Ncomp <- 9
Model <- PLSModel
yhat <- predict(Model, newdata=Maldi.test, ncomp=Ncomp)[,,1]
plot(yhat, Maldi.test$Percent_milk)
correlation <- cor(yhat, Maldi.test$Percent_milk)
#To make sure that the RMSEP-function in the pls-package is used:
plot(pls::RMSEP(PLSModel, estimate="test", newdata=Maldi.test, ncomp=Ncomp))
#To make sure that the RMSEP-function in the pls-package is used:
pls::RMSEP(PLSModel, estimate="test", newdata=Maldi.test, ncomp=Ncomp)
data("Maldi.test")
Ncomp <- 11
Model <- PCRModel
yhat <- predict(Model, newdata=Maldi.test, ncomp=Ncomp)[,,1]
plot(yhat, Maldi.test$Percent_milk)
cor(yhat, Maldi.test$Percent_milk)
#To make sure that the RMSEP-function in the pls-package is used:
pls::RMSEP(PCRModel, estimate="test", newdata=Maldi.test, ncomp=Ncomp)
Ncomp <- 9
Model <- PLSModel
yhat <- predict(Model, newdata=Maldi.test, ncomp=Ncomp)[,,1]
plot(yhat, Maldi.test$Percent_milk)
correlation <- cor(yhat, Maldi.test$Percent_milk)
#To make sure that the RMSEP-function in the pls-package is used:
pls::RMSEP(PLSModel, estimate="test", newdata=Maldi.test, ncomp=Ncomp)
Ncomp <- 9
Model <- PLSModel
yhat <- predict(Model, newdata=Maldi.test, ncomp=Ncomp)[,,1]
plot(yhat, Maldi.test$Percent_milk)
cor(yhat, Maldi.test$Percent_milk)
#To make sure that the RMSEP-function in the pls-package is used:
pls::RMSEP(PLSModel, estimate="test", newdata=Maldi.test, ncomp=Ncomp)
